<?xml version="1.0" encoding="UTF-8"?><!--~ Copyright 2018 Actinver~ Licensed under the Apache License, Version 2.0 (the "License");~ you may not use this file except in compliance with the License.~ You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 ~ Unless required by applicable law or agreed to in writing, software~ distributed under the License is distributed on an "AS IS" BASIS,~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.~ See the License for the specific language governing permissions and~ limitations under the License.--><blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"	xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0"	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"	xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd">	<!-- Contexto principal de camel -->	<camelContext allowUseOriginalMessage="false"		id="contextoCamelProcesador" xmlns="http://camel.apache.org/schema/blueprint">		<endpoint uri="infinispan://?cacheContainer=#cacheManager" 	id="datagrid" />		<route autoStartup="true" id="transformacionDeMensajes"			startupOrder="2">			<from uri="activemq:topic:BIVA.ITCH.FEED" id="leerMensajeJMS">				<description />			</from>			<log message="${body}" />			<process ref="deserializador" id="deserializarMensajes" />			<to uri="transformadorMensaje" id="transformarMensaje" />			<split parallelProcessing="true" id="divideResultado">				<simple>${body}</simple>				<convertBodyTo					type="mx.com.actinver.terminal.notificaciones.DestinoObjeto" id="convierteEnObjeto" />				<setHeader headerName="destino" id="agregaCabeceraDestino">					<simple>${in.body.destino}</simple>				</setHeader>				<setHeader headerName="emisoraserie" id="agregaCabeceraEmisoraSerie">					<simple>${in.body.emisoraSerie}</simple>				</setHeader>				<setBody id="agregaCuerpoObjetoSerializadoPorPipes">					<simple>${in.body.objeto}</simple>				</setBody>				<convertBodyTo type="java.lang.String" id="convierteCuerpoaCadena" />				<recipientList parallelProcessing="true"					id="enviaMensajeaTopicos">					<simple>activemq:topic:${in.header.destino}</simple>				</recipientList>			</split>		</route>		<route autoStartup="true" id="GuardaNotificacionEmisoras">			<from				uri="activemq:queue:NOTIFICATION.RASTREO"></from>			<split>				<simple>${body}</simple>				<transform>					<simple>${in.body}\n</simple>				</transform>				<to					uri="file:/opt/rh/Emisora?fileName=${in.header.emisoraserie}-${date:now:ddMMYYYY}.txt&amp;fileExist=Append" />			</split>		</route>		<route autoStartup="true" id="GuardaNotificacionProfundidad">			<from				uri="activemq:queue:PROFUNDIDAD.RASTREO" />			<split>				<simple>${body}</simple>				<transform>					<simple>${in.body}\n</simple>				</transform>				<to					uri="file:/opt/rh/Profundidad?fileName=${in.header.emisoraserie}-${date:now:ddMMYYYY}.txt&amp;fileExist=Append" />			</split>		</route>		<route autoStartup="true" id="GuardaNotificacionHechos">			<from uri="activemq:queue:HECHOS.RASTREO"></from>			<split>				<simple>${body}</simple>				<transform>					<simple>${in.body}\n</simple>				</transform>				<to					uri="file:/opt/rh/Hechos?fileName=${in.header.emisoraserie}-${date:now:ddMMYYYY}.txt&amp;fileExist=Append" />			</split>		</route>		<route autoStartup="true" id="leerDeDataGrid" startupOrder="1">			<from uri="timer://unaSolaVez?repeatCount=1&amp;period=10" id="ejecutarRuta">				<description />			</from>			<setHeader headerName="CamelInfinispanKey" id="getOpRouteSetKey">				<constant>indice</constant>			</setHeader>			<setHeader headerName="CamelInfinispanCacheName" id="getOpRouteSetCacheName">				<constant>ActinverCacheGrid01</constant>			</setHeader>			<setHeader headerName="CamelInfinispanOperation" id="getOpRouteSetOperation">				<constant>CamelInfinispanOperationGet</constant>			</setHeader>			<to ref="datagrid" id="getOpRouteToDataGrid1" />			<setBody id="getOpRouteSetResponse">				<simple>${header.CamelInfinispanOperationResult}</simple>			</setBody>			<process ref="procesadorIndice" />			<split parallelProcessing="true" id="recuperaIndice">				<simple>${body}</simple>				<setHeader headerName="tipoDeObjeto" id="asignarTipo">					<simple>${in.body.tipo}</simple>				</setHeader>				<setHeader headerName="CamelInfinispanKey" id="getOpRouteSetKey2">					<simple>${in.body.clave}</simple>				</setHeader>				<setHeader headerName="CamelInfinispanCacheName" id="getOpRouteSetCacheName2">					<constant>ActinverCacheGrid01</constant>				</setHeader>				<setHeader headerName="CamelInfinispanOperation" id="getOpRouteSetOperation2">					<constant>CamelInfinispanOperationGet</constant>				</setHeader>				<to ref="datagrid" id="getOpRouteToDataGrid2" />				<setBody id="getOpRouteSetResponse">					<simple>${header.CamelInfinispanOperationResult}</simple>				</setBody>				<process ref="recuperadorMemoria" />			</split>			<log message="Finaliza Carga" />		</route>		<route autoStartup="true" id="SincronizadorAGrid" startupOrder="3">			<from uri="seda:datosGrid" />			<process ref="sincronizacionGrid" />			<choice id="enviaDataGrid">				<when id="siEnviar">					<simple>${in.header.enviaraGrid} == true</simple>					<setHeader headerName="CamelInfinispanKey" id="putOpRouteSetKey">						<simple>${in.body.clave}</simple>					</setHeader>					<setHeader headerName="CamelInfinispanCacheName" id="putOpRouteSetCacheName">						<constant>ActinverCacheGrid01</constant>					</setHeader>					<setHeader headerName="CamelInfinispanOperation" id="putOpRouteSetOperation">						<constant>CamelInfinispanOperationPut</constant>					</setHeader>					<setHeader headerName="CamelInfinispanValue" id="putOpRouteSetValue">						<simple>${in.body.valor}</simple>					</setHeader>					<to ref="datagrid" id="getOpRouteToDataGrid" />					<setHeader headerName="CamelInfinispanKey" id="putOpRouteSetKey">						<constant>indice</constant>					</setHeader>					<setHeader headerName="CamelInfinispanCacheName" id="putOpRouteSetCacheName">						<constant>ActinverCacheGrid01</constant>					</setHeader>					<setHeader headerName="CamelInfinispanOperation" id="putOpRouteSetOperation">						<constant>CamelInfinispanOperationPut</constant>					</setHeader>					<setHeader headerName="CamelInfinispanValue" id="putOpRouteSetValue">						<simple>${in.header.indice.getIndexAsString}</simple>					</setHeader>					<to ref="datagrid" id="getOpRouteToDataGrid" />				</when>			</choice>		</route>		<route autoStartup="false" routePolicyRef="inicioLimpieza" id="limpiaNotificacion">			<from uri="timer://revision?fixedRate=true&amp;period={{limpieza}}" />			<bean ref="transformador" method="limpiadorNotificaciones" />			<log message="limpieza terminada" />		</route>		<route autoStartup="true" id="BorrarDeGrid">			<from uri="seda:datosGrid" />			<process ref="sincronizacionGridLimpieza" />			<choice>				<when>					<simple>${in.header.enviaraGrid} == true</simple>					<setHeader headerName="CamelInfinispanKey">						<simple>${in.body.clave}</simple>					</setHeader>					<setHeader headerName="CamelInfinispanCacheName">						<constant>ActinverCacheGrid01</constant>					</setHeader>					<setHeader headerName="CamelInfinispanOperation">						<constant>CamelInfinispanOperationRemove</constant>					</setHeader>					<to ref="datagrid" />					<choice>					<when>					<simple>${in.header.indexar} == true</simple>					<setHeader headerName="CamelInfinispanKey">						<constant>indice</constant>					</setHeader>					<setHeader headerName="CamelInfinispanCacheName">						<constant>ActinverCacheGrid01</constant>					</setHeader>					<setHeader headerName="CamelInfinispanOperation">						<constant>CamelInfinispanOperationPut</constant>					</setHeader>					<to ref="datagrid" />					</when>					</choice>				</when>			</choice>		</route>		<route autoStartup="true" id="transformacionDeMensajesRetransmision">			<from uri="activemq:queue:BIVA.ITCH.FEED.RETRANSMISION" />			<log message="MENSAJE DE RETRANSMISION ${body}" />			<process ref="deserializador" />			<to uri="transformadorMensajeRetransmision" />		</route>	</camelContext></blueprint>